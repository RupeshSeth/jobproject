{"remainingRequest":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rupeshkumar/JobProject/pizza-task/src/views/Home.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/rupeshkumar/JobProject/pizza-task/src/views/Home.vue","mtime":1628692801954},{"path":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKaW1wb3J0IFZ1ZSBmcm9tICJ2dWUiCmltcG9ydCBDb21wb25lbnQgZnJvbSAidnVlLWNsYXNzLWNvbXBvbmVudCI7CgpAQ29tcG9uZW50KHt9KQpleHBvcnQgZGVmYXVsdCBjbGFzcyBEYXNoYm9hcmQgZXh0ZW5kcyBWdWUgewogcHJpdmF0ZSAgcG9zdHMgPSBbXTsKCnByaXZhdGUgaGVhZGVyczogYW55ID0gWwogICAgeyB0ZXh0OiAnSUQnLCBhbGlnbjogJ2NlbnRlcicsIHNvcnRhYmxlOiB0cnVlLCB2YWx1ZTogJ2lkJ30sCiAgICB7IHRleHQ6ICdVU0VSIElEJywgYWxpZ246ICdjZW50ZXInLCBzb3J0YWJsZTogdHJ1ZSwgdmFsdWU6ICd1c2VySWQnLCB3aWR0aDonMTAwJ30sCiAgICB7IHRleHQ6ICdUSVRMRScsIGFsaWduOiAnc3RhcnQnLCBzb3J0YWJsZTogdHJ1ZSwgdmFsdWU6ICd0aXRsZScgfSwKICAgIHsgdGV4dDogJ0JPRFknLCBhbGlnbjogJ3N0YXJ0Jywgc29ydGFibGU6IHRydWUsIHZhbHVlOiAnYm9keScgfSwKICAgIF07Cgpwcml2YXRlIG1vdW50ZWQoKSB7CiAgICB0aGlzLmdldFBvc3QoKTsKfQoKYXN5bmMgIGdldFBvc3QoKSB7CiAgLy8gR0VUIHJlcXVlc3QgdXNpbmcgZmV0Y2ggd2l0aCBhc3luYy9hd2FpdAogIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goImh0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS9wb3N0cyIpOwogIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7CiAgdGhpcy5wb3N0cyA9IGRhdGE7CiAgY29uc29sZS5sb2codGhpcy5wb3N0cykKCn0gCgogICAKCiAgICAKCiAgICAKCgoKfTsK"},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;AAUA","file":"Home.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div class=\"Dashboard\" >\n        <v-layout>\n            <v-flex xs12><h1 class=\"h2 font-weight-bold\" style=\"color: #999\">Posts</h1></v-flex>\n           \n        </v-layout>\n        <v-divider></v-divider>\n       \n\n        <v-layout class=\"mt-5\">\n            <v-flex>\n\n                <v-data-table\n                :headers=\"headers\"\n                :items=\"posts\"\n                :items-per-page=\"10\"\n                class=\"elevation-1\"\n            >\n        \n\n                <template v-slot:body=\"{ items }\">\n                    <tbody>\n                        <tr v-for=\"item in items\" :key=\"item.id\">\n                        <td class=\"text-md-left\">\n                            <v-chip class=\"ma-2\" color=\"primary\">{{item.id}}</v-chip>\n                        </td>\n                        <td><v-chip class=\"ma-2\" color=\"indigo\" text-color=\"white\">\n                            \n                                {{item.userId}}</v-chip>\n                        </td>\n                        <td class=\"text-md-left\">\n                            {{item.title}}\n                        </td>\n                        <td class=\"text-md-left font-weight-bold\">{{item.body}}</td>\n                      \n                    </tr>\n                    </tbody>\n                </template>\n            \n            \n            </v-data-table>\n            </v-flex>\n        </v-layout>\n       \n    </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from \"vue\"\nimport Component from \"vue-class-component\";\n\n@Component({})\nexport default class Dashboard extends Vue {\n private  posts = [];\n\nprivate headers: any = [\n    { text: 'ID', align: 'center', sortable: true, value: 'id'},\n    { text: 'USER ID', align: 'center', sortable: true, value: 'userId', width:'100'},\n    { text: 'TITLE', align: 'start', sortable: true, value: 'title' },\n    { text: 'BODY', align: 'start', sortable: true, value: 'body' },\n    ];\n\nprivate mounted() {\n    this.getPost();\n}\n\nasync  getPost() {\n  // GET request using fetch with async/await\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n  const data = await response.json();\n  this.posts = data;\n  console.log(this.posts)\n\n} \n\n   \n\n    \n\n    \n\n\n\n};\n</script>\n\n<style>\n\n\n\n\n</style>"]}]}