{"remainingRequest":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/babel-loader/lib/index.js!/Users/rupeshkumar/JobProject/pizza-task/node_modules/vuetify/lib/util/theme.js","dependencies":[{"path":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/vuetify/lib/util/theme.js","mtime":499162500000},{"path":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3RhcnRzLXdpdGgiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yIjsKaW1wb3J0IF90eXBlb2YyIGZyb20gIi9Vc2Vycy9ydXBlc2hrdW1hci9Kb2JQcm9qZWN0L3BpenphLXRhc2svbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZiI7Cgp2YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsKICAgIHZhciBfYXJyID0gW107CiAgICB2YXIgX24gPSB0cnVlOwogICAgdmFyIF9kID0gZmFsc2U7CiAgICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogICAgdHJ5IHsKICAgICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgICAgfQogICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgIF9kID0gdHJ1ZTsKICAgICAgX2UgPSBlcnI7CiAgICB9IGZpbmFsbHkgewogICAgICB0cnkgewogICAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdKSBfaVsicmV0dXJuIl0oKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIF9hcnI7CiAgfQoKICByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgewogICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgewogICAgICByZXR1cm4gYXJyOwogICAgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsKICAgICAgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsKICAgIH0gZWxzZSB7CiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKICAgIH0KICB9Owp9KCk7Cgp2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIgPyBmdW5jdGlvbiAob2JqKSB7CiAgcmV0dXJuIF90eXBlb2YyKG9iaik7Cn0gOiBmdW5jdGlvbiAob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogX3R5cGVvZjIob2JqKTsKfTsKCmltcG9ydCB7IGNvbG9yVG9JbnQsIGludFRvSGV4LCBjb2xvclRvSGV4IH0gZnJvbSAnLi9jb2xvclV0aWxzJzsKaW1wb3J0ICogYXMgc1JHQiBmcm9tICcuL2NvbG9yL3RyYW5zZm9ybVNSR0InOwppbXBvcnQgKiBhcyBMQUIgZnJvbSAnLi9jb2xvci90cmFuc2Zvcm1DSUVMQUInOwpleHBvcnQgZnVuY3Rpb24gcGFyc2UodGhlbWUpIHsKICB2YXIgaXNJdGVtID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTsKICB2YXIgY29sb3JzID0gT2JqZWN0LmtleXModGhlbWUpOwogIHZhciBwYXJzZWRUaGVtZSA9IHt9OwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbG9ycy5sZW5ndGg7ICsraSkgewogICAgdmFyIG5hbWUgPSBjb2xvcnNbaV07CiAgICB2YXIgdmFsdWUgPSB0aGVtZVtuYW1lXTsKCiAgICBpZiAoaXNJdGVtKSB7CiAgICAgIGlmIChuYW1lID09PSAnYmFzZScgfHwgbmFtZS5zdGFydHNXaXRoKCdsaWdodGVuJykgfHwgbmFtZS5zdGFydHNXaXRoKCdkYXJrZW4nKSkgewogICAgICAgIHBhcnNlZFRoZW1lW25hbWVdID0gY29sb3JUb0hleCh2YWx1ZSk7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpKSA9PT0gJ29iamVjdCcpIHsKICAgICAgcGFyc2VkVGhlbWVbbmFtZV0gPSBwYXJzZSh2YWx1ZSwgdHJ1ZSk7CiAgICB9IGVsc2UgewogICAgICBwYXJzZWRUaGVtZVtuYW1lXSA9IGdlblZhcmlhdGlvbnMobmFtZSwgY29sb3JUb0ludCh2YWx1ZSkpOwogICAgfQogIH0KCiAgcmV0dXJuIHBhcnNlZFRoZW1lOwp9Ci8qKgogKiBHZW5lcmF0ZSB0aGUgQ1NTIGZvciBhIGJhc2UgY29sb3IgKC5wcmltYXJ5KQogKi8KCnZhciBnZW5CYXNlQ29sb3IgPSBmdW5jdGlvbiBnZW5CYXNlQ29sb3IobmFtZSwgdmFsdWUpIHsKICByZXR1cm4gJ1xuLicgKyBuYW1lICsgJyB7XG4gIGJhY2tncm91bmQtY29sb3I6ICcgKyB2YWx1ZSArICcgIWltcG9ydGFudDtcbiAgYm9yZGVyLWNvbG9yOiAnICsgdmFsdWUgKyAnICFpbXBvcnRhbnQ7XG59XG4uJyArIG5hbWUgKyAnLS10ZXh0IHtcbiAgY29sb3I6ICcgKyB2YWx1ZSArICcgIWltcG9ydGFudDtcbiAgY2FyZXQtY29sb3I6ICcgKyB2YWx1ZSArICcgIWltcG9ydGFudDtcbn0nOwp9OwovKioKICogR2VuZXJhdGUgdGhlIENTUyBmb3IgYSB2YXJpYW50IGNvbG9yICgucHJpbWFyeS5kYXJrZW4tMikKICovCgoKdmFyIGdlblZhcmlhbnRDb2xvciA9IGZ1bmN0aW9uIGdlblZhcmlhbnRDb2xvcihuYW1lLCB2YXJpYW50LCB2YWx1ZSkgewogIHZhciBfdmFyaWFudCRzcGxpdCA9IHZhcmlhbnQuc3BsaXQoLyhcZCkvLCAyKSwKICAgICAgX3ZhcmlhbnQkc3BsaXQyID0gX3NsaWNlZFRvQXJyYXkoX3ZhcmlhbnQkc3BsaXQsIDIpLAogICAgICB0eXBlID0gX3ZhcmlhbnQkc3BsaXQyWzBdLAogICAgICBuID0gX3ZhcmlhbnQkc3BsaXQyWzFdOwoKICByZXR1cm4gJ1xuLicgKyBuYW1lICsgJy4nICsgdHlwZSArICctJyArIG4gKyAnIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogJyArIHZhbHVlICsgJyAhaW1wb3J0YW50O1xuICBib3JkZXItY29sb3I6ICcgKyB2YWx1ZSArICcgIWltcG9ydGFudDtcbn1cbi4nICsgbmFtZSArICctLXRleHQudGV4dC0tJyArIHR5cGUgKyAnLScgKyBuICsgJyB7XG4gIGNvbG9yOiAnICsgdmFsdWUgKyAnICFpbXBvcnRhbnQ7XG4gIGNhcmV0LWNvbG9yOiAnICsgdmFsdWUgKyAnICFpbXBvcnRhbnQ7XG59JzsKfTsKCnZhciBnZW5Db2xvclZhcmlhYmxlTmFtZSA9IGZ1bmN0aW9uIGdlbkNvbG9yVmFyaWFibGVOYW1lKG5hbWUpIHsKICB2YXIgdmFyaWFudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2Jhc2UnOwogIHJldHVybiAnLS12LScgKyBuYW1lICsgJy0nICsgdmFyaWFudDsKfTsKCnZhciBnZW5Db2xvclZhcmlhYmxlID0gZnVuY3Rpb24gZ2VuQ29sb3JWYXJpYWJsZShuYW1lKSB7CiAgdmFyIHZhcmlhbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdiYXNlJzsKICByZXR1cm4gJ3ZhcignICsgZ2VuQ29sb3JWYXJpYWJsZU5hbWUobmFtZSwgdmFyaWFudCkgKyAnKSc7Cn07CgpleHBvcnQgZnVuY3Rpb24gZ2VuU3R5bGVzKHRoZW1lKSB7CiAgdmFyIGNzc1ZhciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7CiAgdmFyIGNvbG9ycyA9IE9iamVjdC5rZXlzKHRoZW1lKTsKICBpZiAoIWNvbG9ycy5sZW5ndGgpIHJldHVybiAnJzsKICB2YXIgdmFyaWFibGVzQ3NzID0gJyc7CiAgdmFyIGNzcyA9ICcnOwogIHZhciBhQ29sb3IgPSBjc3NWYXIgPyBnZW5Db2xvclZhcmlhYmxlKCdwcmltYXJ5JykgOiB0aGVtZS5wcmltYXJ5LmJhc2U7CiAgY3NzICs9ICdhIHsgY29sb3I6ICcgKyBhQ29sb3IgKyAnOyB9JzsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2xvcnMubGVuZ3RoOyArK2kpIHsKICAgIHZhciBuYW1lID0gY29sb3JzW2ldOwogICAgdmFyIHZhbHVlID0gdGhlbWVbbmFtZV07CiAgICBpZiAoKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpKSAhPT0gJ29iamVjdCcpIGNvbnRpbnVlOwogICAgY3NzICs9IGdlbkJhc2VDb2xvcihuYW1lLCBjc3NWYXIgPyBnZW5Db2xvclZhcmlhYmxlKG5hbWUpIDogdmFsdWUuYmFzZSk7CiAgICBjc3NWYXIgJiYgKHZhcmlhYmxlc0NzcyArPSAnICAnICsgZ2VuQ29sb3JWYXJpYWJsZU5hbWUobmFtZSkgKyAnOiAnICsgdmFsdWUuYmFzZSArICc7XG4nKTsKICAgIHZhciB2YXJpYW50cyA9IE9iamVjdC5rZXlzKHZhbHVlKTsKCiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdmFyaWFudHMubGVuZ3RoOyArK19pKSB7CiAgICAgIHZhciB2YXJpYW50ID0gdmFyaWFudHNbX2ldOwogICAgICB2YXIgdmFyaWFudFZhbHVlID0gdmFsdWVbdmFyaWFudF07CiAgICAgIGlmICh2YXJpYW50ID09PSAnYmFzZScpIGNvbnRpbnVlOwogICAgICBjc3MgKz0gZ2VuVmFyaWFudENvbG9yKG5hbWUsIHZhcmlhbnQsIGNzc1ZhciA/IGdlbkNvbG9yVmFyaWFibGUobmFtZSwgdmFyaWFudCkgOiB2YXJpYW50VmFsdWUpOwogICAgICBjc3NWYXIgJiYgKHZhcmlhYmxlc0NzcyArPSAnICAnICsgZ2VuQ29sb3JWYXJpYWJsZU5hbWUobmFtZSwgdmFyaWFudCkgKyAnOiAnICsgdmFyaWFudFZhbHVlICsgJztcbicpOwogICAgfQogIH0KCiAgaWYgKGNzc1ZhcikgewogICAgdmFyaWFibGVzQ3NzID0gJzpyb290IHtcbicgKyB2YXJpYWJsZXNDc3MgKyAnfVxuXG4nOwogIH0KCiAgcmV0dXJuIHZhcmlhYmxlc0NzcyArIGNzczsKfQpleHBvcnQgZnVuY3Rpb24gZ2VuVmFyaWF0aW9ucyhuYW1lLCB2YWx1ZSkgewogIHZhciB2YWx1ZXMgPSB7CiAgICBiYXNlOiBpbnRUb0hleCh2YWx1ZSkKICB9OwoKICBmb3IgKHZhciBpID0gNTsgaSA+IDA7IC0taSkgewogICAgdmFsdWVzWydsaWdodGVuJyArIGldID0gaW50VG9IZXgobGlnaHRlbih2YWx1ZSwgaSkpOwogIH0KCiAgZm9yICh2YXIgX2kyID0gMTsgX2kyIDw9IDQ7ICsrX2kyKSB7CiAgICB2YWx1ZXNbJ2RhcmtlbicgKyBfaTJdID0gaW50VG9IZXgoZGFya2VuKHZhbHVlLCBfaTIpKTsKICB9CgogIHJldHVybiB2YWx1ZXM7Cn0KCmZ1bmN0aW9uIGxpZ2h0ZW4odmFsdWUsIGFtb3VudCkgewogIHZhciBsYWIgPSBMQUIuZnJvbVhZWihzUkdCLnRvWFlaKHZhbHVlKSk7CiAgbGFiWzBdID0gbGFiWzBdICsgYW1vdW50ICogMTA7CiAgcmV0dXJuIHNSR0IuZnJvbVhZWihMQUIudG9YWVoobGFiKSk7Cn0KCmZ1bmN0aW9uIGRhcmtlbih2YWx1ZSwgYW1vdW50KSB7CiAgdmFyIGxhYiA9IExBQi5mcm9tWFlaKHNSR0IudG9YWVoodmFsdWUpKTsKICBsYWJbMF0gPSBsYWJbMF0gLSBhbW91bnQgKiAxMDsKICByZXR1cm4gc1JHQi5mcm9tWFlaKExBQi50b1hZWihsYWIpKTsKfQ=="},{"version":3,"sources":["../../src/util/theme.ts"],"names":[],"mappings":"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","sourcesContent":["import { colorToInt, intToHex, colorToHex, RGB } from './colorUtils'\nimport * as sRGB from './color/transformSRGB'\nimport * as LAB from './color/transformCIELAB'\nimport { VuetifyTheme } from 'vuetify/types'\n\ninterface ParsedThemeItem {\n  base: string\n  lighten5: string\n  lighten4: string\n  lighten3: string\n  lighten2: string\n  lighten1: string\n  darken1: string\n  darken2: string\n  darken3: string\n  darken4: string\n\n  [name: string]: string\n}\n\ninterface ParsedTheme {\n  [name: string]: ParsedThemeItem\n}\n\nexport function parse (theme: VuetifyTheme | Record<string, number | string>, isItem = false): ParsedTheme {\n  const colors = Object.keys(theme)\n  const parsedTheme: any = {}\n\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i]\n    const value = theme[name]\n\n    if (isItem) {\n      if (name === 'base' || name.startsWith('lighten') || name.startsWith('darken')) {\n        parsedTheme[name] = colorToHex(value)\n      }\n    } else if (typeof value === 'object') {\n      parsedTheme[name] = parse(value, true)\n    } else {\n      parsedTheme[name] = genVariations(name, colorToInt(value))\n    }\n  }\n\n  return parsedTheme\n}\n\n/**\n * Generate the CSS for a base color (.primary)\n */\nconst genBaseColor = (name: string, value: string): string => {\n  return `\n.${name} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.${name}--text {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`\n}\n\n/**\n * Generate the CSS for a variant color (.primary.darken-2)\n */\nconst genVariantColor = (name: string, variant: string, value: string): string => {\n  const [type, n] = variant.split(/(\\d)/, 2)\n  return `\n.${name}.${type}-${n} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.${name}--text.text--${type}-${n} {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`\n}\n\nconst genColorVariableName = (name: string, variant = 'base'): string => `--v-${name}-${variant}`\n\nconst genColorVariable = (name: string, variant = 'base'): string => `var(${genColorVariableName(name, variant)})`\n\nexport function genStyles (theme: ParsedTheme, cssVar = false): string {\n  const colors = Object.keys(theme)\n\n  if (!colors.length) return ''\n\n  let variablesCss = ''\n  let css = ''\n\n  const aColor = cssVar ? genColorVariable('primary') : theme.primary.base\n  css += `a { color: ${aColor}; }`\n\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i]\n    const value = theme[name]\n\n    if (typeof value !== 'object') continue\n\n    css += genBaseColor(name, cssVar ? genColorVariable(name) : value.base)\n    cssVar && (variablesCss += `  ${genColorVariableName(name)}: ${value.base};\\n`)\n\n    const variants = Object.keys(value)\n    for (let i = 0; i < variants.length; ++i) {\n      const variant = variants[i]\n      const variantValue = value[variant]\n      if (variant === 'base') continue\n\n      css += genVariantColor(name, variant, cssVar ? genColorVariable(name, variant) : variantValue)\n      cssVar && (variablesCss += `  ${genColorVariableName(name, variant)}: ${variantValue};\\n`)\n    }\n  }\n\n  if (cssVar) {\n    variablesCss = `:root {\\n${variablesCss}}\\n\\n`\n  }\n\n  return variablesCss + css\n}\n\nexport function genVariations (name: string, value: RGB): Record<string, string> {\n  const values: Record<string, string> = {\n    base: intToHex(value)\n  }\n\n  for (let i = 5; i > 0; --i) {\n    values[`lighten${i}`] = intToHex(lighten(value, i))\n  }\n\n  for (let i = 1; i <= 4; ++i) {\n    values[`darken${i}`] = intToHex(darken(value, i))\n  }\n\n  return values\n}\n\nfunction lighten (value: RGB, amount: number): RGB {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value))\n  lab[0] = lab[0] + amount * 10\n  return sRGB.fromXYZ(LAB.toXYZ(lab))\n}\n\nfunction darken (value: RGB, amount: number): RGB {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value))\n  lab[0] = lab[0] - amount * 10\n  return sRGB.fromXYZ(LAB.toXYZ(lab))\n}\n"],"sourceRoot":""}]}