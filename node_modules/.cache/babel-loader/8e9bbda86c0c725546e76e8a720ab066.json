{"remainingRequest":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/babel-loader/lib/index.js!/Users/rupeshkumar/JobProject/pizza-task/node_modules/vuetify/lib/components/VDatePicker/util/createNativeLocaleFormatter.js","dependencies":[{"path":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/vuetify/lib/components/VDatePicker/util/createNativeLocaleFormatter.js","mtime":499162500000},{"path":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvciI7Cgp2YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsKICAgIHZhciBfYXJyID0gW107CiAgICB2YXIgX24gPSB0cnVlOwogICAgdmFyIF9kID0gZmFsc2U7CiAgICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogICAgdHJ5IHsKICAgICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgICAgfQogICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgIF9kID0gdHJ1ZTsKICAgICAgX2UgPSBlcnI7CiAgICB9IGZpbmFsbHkgewogICAgICB0cnkgewogICAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdKSBfaVsicmV0dXJuIl0oKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIF9hcnI7CiAgfQoKICByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgewogICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgewogICAgICByZXR1cm4gYXJyOwogICAgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsKICAgICAgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsKICAgIH0gZWxzZSB7CiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKICAgIH0KICB9Owp9KCk7CgppbXBvcnQgcGFkIGZyb20gJy4vcGFkJzsKCmZ1bmN0aW9uIGNyZWF0ZU5hdGl2ZUxvY2FsZUZvcm1hdHRlcihsb2NhbGUsIG9wdGlvbnMpIHsKICB2YXIgc3Vic3RyT3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogewogICAgc3RhcnQ6IDAsCiAgICBsZW5ndGg6IDAKICB9OwoKICB2YXIgbWFrZUlzb1N0cmluZyA9IGZ1bmN0aW9uIG1ha2VJc29TdHJpbmcoZGF0ZVN0cmluZykgewogICAgdmFyIF9kYXRlU3RyaW5nJHRyaW0kc3BsaSA9IGRhdGVTdHJpbmcudHJpbSgpLnNwbGl0KCcgJylbMF0uc3BsaXQoJy0nKSwKICAgICAgICBfZGF0ZVN0cmluZyR0cmltJHNwbGkyID0gX3NsaWNlZFRvQXJyYXkoX2RhdGVTdHJpbmckdHJpbSRzcGxpLCAzKSwKICAgICAgICB5ZWFyID0gX2RhdGVTdHJpbmckdHJpbSRzcGxpMlswXSwKICAgICAgICBtb250aCA9IF9kYXRlU3RyaW5nJHRyaW0kc3BsaTJbMV0sCiAgICAgICAgZGF0ZSA9IF9kYXRlU3RyaW5nJHRyaW0kc3BsaTJbMl07CgogICAgcmV0dXJuIFtwYWQoeWVhciwgNCksIHBhZChtb250aCB8fCAxKSwgcGFkKGRhdGUgfHwgMSldLmpvaW4oJy0nKTsKICB9OwoKICB0cnkgewogICAgdmFyIGludGxGb3JtYXR0ZXIgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUgfHwgdW5kZWZpbmVkLCBvcHRpb25zKTsKICAgIHJldHVybiBmdW5jdGlvbiAoZGF0ZVN0cmluZykgewogICAgICByZXR1cm4gaW50bEZvcm1hdHRlci5mb3JtYXQobmV3IERhdGUobWFrZUlzb1N0cmluZyhkYXRlU3RyaW5nKSArICdUMDA6MDA6MDArMDA6MDAnKSk7CiAgICB9OwogIH0gY2F0Y2ggKGUpIHsKICAgIHJldHVybiBzdWJzdHJPcHRpb25zLnN0YXJ0IHx8IHN1YnN0ck9wdGlvbnMubGVuZ3RoID8gZnVuY3Rpb24gKGRhdGVTdHJpbmcpIHsKICAgICAgcmV0dXJuIG1ha2VJc29TdHJpbmcoZGF0ZVN0cmluZykuc3Vic3RyKHN1YnN0ck9wdGlvbnMuc3RhcnQgfHwgMCwgc3Vic3RyT3B0aW9ucy5sZW5ndGgpOwogICAgfSA6IHVuZGVmaW5lZDsKICB9Cn0KCmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU5hdGl2ZUxvY2FsZUZvcm1hdHRlcjs="},{"version":3,"sources":["../../../../src/components/VDatePicker/util/createNativeLocaleFormatter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,GAAA,MAAA,OAAA;;AAoBA,SAAA,2BAAA,CAAA,MAAA,EAAA,OAAA,EAGwD;AAAA,MAAtD,aAAsD,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAvB;AAAE,IAAA,KAAA,EAAF,CAAA;AAAY,IAAA,MAAA,EAAZ;AAAA,GAAuB;;AAEtD,MAAM,aAAA,GAAgB,SAAhB,aAAgB,CAAA,UAAA,EAAuB;AAAA,QAAA,qBAAA,GACf,UAAA,CAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,EAAA,KAAA,CADe,GACf,CADe;AAAA,QAAA,sBAAA,GAAA,cAAA,CAAA,qBAAA,EAAA,CAAA,CAAA;AAAA,QACpC,IADoC,GAAA,sBAAA,CAAA,CAAA,CAAA;AAAA,QAC9B,KAD8B,GAAA,sBAAA,CAAA,CAAA,CAAA;AAAA,QACvB,IADuB,GAAA,sBAAA,CAAA,CAAA,CAAA;;AAE3C,WAAO,CAAC,GAAA,CAAA,IAAA,EAAD,CAAC,CAAD,EAAe,GAAA,CAAI,KAAA,IAAnB,CAAe,CAAf,EAAgC,GAAA,CAAI,IAAA,IAApC,CAAgC,CAAhC,EAAA,IAAA,CAAP,GAAO,CAAP;AAFF,GAAA;;AAKA,MAAI;AACF,QAAM,aAAA,GAAgB,IAAI,IAAA,CAAJ,cAAA,CAAwB,MAAA,IAAxB,SAAA,EAAtB,OAAsB,CAAtB;AACA,WAAO,UAAA,UAAA,EAAA;AAAA,aAAwB,aAAA,CAAA,MAAA,CAAqB,IAAA,IAAA,CAAY,aAAA,CAAZ,UAAY,CAAA,GAAzD,iBAA6C,CAArB,CAAxB;AAAP,KAAA;AAFF,GAAA,CAGE,OAAA,CAAA,EAAU;AACV,WAAQ,aAAA,CAAA,KAAA,IAAuB,aAAA,CAAxB,MAAC,GACJ,UAAA,UAAA,EAAA;AAAA,aAAwB,aAAA,CAAA,UAAA,CAAA,CAAA,MAAA,CAAiC,aAAA,CAAA,KAAA,IAAjC,CAAA,EAA2D,aAAA,CAAnF,MAAwB,CAAxB;AADG,KAAC,GAAR,SAAA;AAGD;AACF;;AAED,eAAA,2BAAA","sourcesContent":["import pad from './pad'\n\ninterface SubstrOptions {\n  start?: number\n  length: number\n}\n\nexport type DatePickerFormatter = (date: string) => string\n\nfunction createNativeLocaleFormatter (\n  local: string | undefined,\n  options: Intl.DateTimeFormatOptions\n): DatePickerFormatter | undefined\n\nfunction createNativeLocaleFormatter (\n  local: string | undefined,\n  options: Intl.DateTimeFormatOptions,\n  substrOptions: SubstrOptions\n): DatePickerFormatter\n\nfunction createNativeLocaleFormatter (\n  locale: string | undefined,\n  options: Intl.DateTimeFormatOptions,\n  substrOptions: SubstrOptions = { start: 0, length: 0 }\n): DatePickerFormatter | undefined {\n  const makeIsoString = (dateString: string) => {\n    const [year, month, date] = dateString.trim().split(' ')[0].split('-')\n    return [pad(year, 4), pad(month || 1), pad(date || 1)].join('-')\n  }\n\n  try {\n    const intlFormatter = new Intl.DateTimeFormat(locale || undefined, options)\n    return (dateString: string) => intlFormatter.format(new Date(`${makeIsoString(dateString)}T00:00:00+00:00`))\n  } catch (e) {\n    return (substrOptions.start || substrOptions.length)\n      ? (dateString: string) => makeIsoString(dateString).substr(substrOptions.start || 0, substrOptions.length)\n      : undefined\n  }\n}\n\nexport default createNativeLocaleFormatter\n"],"sourceRoot":""}]}