{"remainingRequest":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/babel-loader/lib/index.js!/Users/rupeshkumar/JobProject/pizza-task/node_modules/vuetify/lib/util/colorUtils.js","dependencies":[{"path":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/vuetify/lib/util/colorUtils.js","mtime":499162500000},{"path":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rupeshkumar/JobProject/pizza-task/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGVhdCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7CmltcG9ydCB7IGNvbnNvbGVXYXJuIH0gZnJvbSAnLi9jb25zb2xlJzsKZXhwb3J0IGZ1bmN0aW9uIGNvbG9yVG9JbnQoY29sb3IpIHsKICB2YXIgcmdiID0gdm9pZCAwOwoKICBpZiAodHlwZW9mIGNvbG9yID09PSAnbnVtYmVyJykgewogICAgcmdiID0gY29sb3I7CiAgfSBlbHNlIGlmICh0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnKSB7CiAgICB2YXIgYyA9IGNvbG9yWzBdID09PSAnIycgPyBjb2xvci5zdWJzdHJpbmcoMSkgOiBjb2xvcjsKCiAgICBpZiAoYy5sZW5ndGggPT09IDMpIHsKICAgICAgYyA9IGMuc3BsaXQoJycpLm1hcChmdW5jdGlvbiAoY2hhcikgewogICAgICAgIHJldHVybiBjaGFyICsgY2hhcjsKICAgICAgfSkuam9pbignJyk7CiAgICB9CgogICAgaWYgKGMubGVuZ3RoICE9PSA2KSB7CiAgICAgIGNvbnNvbGVXYXJuKCdcJycgKyBjb2xvciArICdcJyBpcyBub3QgYSB2YWxpZCByZ2IgY29sb3InKTsKICAgIH0KCiAgICByZ2IgPSBwYXJzZUludChjLCAxNik7CiAgfSBlbHNlIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbG9ycyBjYW4gb25seSBiZSBudW1iZXJzIG9yIHN0cmluZ3MsIHJlY2lldmVkICcgKyAoY29sb3IgPT0gbnVsbCA/IGNvbG9yIDogY29sb3IuY29uc3RydWN0b3IubmFtZSkgKyAnIGluc3RlYWQnKTsKICB9CgogIGlmIChyZ2IgPCAwKSB7CiAgICBjb25zb2xlV2FybignQ29sb3JzIGNhbm5vdCBiZSBuZWdhdGl2ZTogXCcnICsgY29sb3IgKyAnXCcnKTsKICAgIHJnYiA9IDA7CiAgfSBlbHNlIGlmIChyZ2IgPiAweGZmZmZmZiB8fCBpc05hTihyZ2IpKSB7CiAgICBjb25zb2xlV2FybignXCcnICsgY29sb3IgKyAnXCcgaXMgbm90IGEgdmFsaWQgcmdiIGNvbG9yJyk7CiAgICByZ2IgPSAweGZmZmZmZjsKICB9CgogIHJldHVybiByZ2I7Cn0KZXhwb3J0IGZ1bmN0aW9uIGludFRvSGV4KGNvbG9yKSB7CiAgdmFyIGhleENvbG9yID0gY29sb3IudG9TdHJpbmcoMTYpOwogIGlmIChoZXhDb2xvci5sZW5ndGggPCA2KSBoZXhDb2xvciA9ICcwJy5yZXBlYXQoNiAtIGhleENvbG9yLmxlbmd0aCkgKyBoZXhDb2xvcjsKICByZXR1cm4gJyMnICsgaGV4Q29sb3I7Cn0KZXhwb3J0IGZ1bmN0aW9uIGNvbG9yVG9IZXgoY29sb3IpIHsKICByZXR1cm4gaW50VG9IZXgoY29sb3JUb0ludChjb2xvcikpOwp9"},{"version":3,"sources":["../../src/util/colorUtils.ts"],"names":[],"mappings":";;;;;;;;AAAA,SAAA,WAAA,QAAA,WAAA;AAMA,OAAM,SAAA,UAAA,CAAA,KAAA,EAAiD;AACrD,MAAI,GAAA,GAAA,KAAJ,CAAA;;AAEA,MAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7B,IAAA,GAAA,GAAA,KAAA;AADF,GAAA,MAEO,IAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AACpC,QAAI,CAAA,GAAI,KAAA,CAAA,CAAA,CAAA,KAAA,GAAA,GAAmB,KAAA,CAAA,SAAA,CAAnB,CAAmB,CAAnB,GAAR,KAAA;;AACA,QAAI,CAAA,CAAA,MAAA,KAAJ,CAAA,EAAoB;AAClB,MAAA,CAAA,GAAI,CAAA,CAAA,KAAA,CAAA,EAAA,EAAA,GAAA,CAAgB,UAAA,IAAA,EAAA;AAAA,eAAQ,IAAA,GAAR,IAAA;AAAhB,OAAA,EAAA,IAAA,CAAJ,EAAI,CAAJ;AACD;;AACD,QAAI,CAAA,CAAA,MAAA,KAAJ,CAAA,EAAoB;AAClB,MAAA,WAAA,CAAA,OAAA,KAAA,GAAA,6BAAA,CAAA;AACD;;AACD,IAAA,GAAA,GAAM,QAAA,CAAA,CAAA,EAAN,EAAM,CAAN;AARK,GAAA,MASA;AACL,UAAM,IAAA,SAAA,CAAA,sDAAiE,KAAA,IAAA,IAAA,GAAA,KAAA,GAAwB,KAAA,CAAA,WAAA,CAAzF,IAAA,IAAN,UAAM,CAAN;AACD;;AAED,MAAI,GAAA,GAAJ,CAAA,EAAa;AACX,IAAA,WAAA,CAAA,kCAAA,KAAA,GAAA,IAAA,CAAA;AACA,IAAA,GAAA,GAAA,CAAA;AAFF,GAAA,MAGO,IAAI,GAAA,GAAA,QAAA,IAAkB,KAAA,CAAtB,GAAsB,CAAtB,EAAkC;AACvC,IAAA,WAAA,CAAA,OAAA,KAAA,GAAA,6BAAA,CAAA;AACA,IAAA,GAAA,GAAA,QAAA;AACD;;AAED,SAAA,GAAA;AACD;AAED,OAAM,SAAA,QAAA,CAAA,KAAA,EAA8B;AAClC,MAAI,QAAA,GAAmB,KAAA,CAAA,QAAA,CAAvB,EAAuB,CAAvB;AAEA,MAAI,QAAA,CAAA,MAAA,GAAJ,CAAA,EAAyB,QAAA,GAAW,IAAA,MAAA,CAAW,IAAI,QAAA,CAAf,MAAA,IAAX,QAAA;AAEzB,SAAO,MAAP,QAAA;AACD;AAED,OAAM,SAAA,UAAA,CAAA,KAAA,EAAiD;AACrD,SAAO,QAAA,CAAS,UAAA,CAAhB,KAAgB,CAAT,CAAP;AACD","sourcesContent":["import { consoleWarn } from './console'\n\nexport type RGB = number\nexport type XYZ = [number, number, number]\nexport type LAB = [number, number, number]\n\nexport function colorToInt (color: string | number | {}): RGB {\n  let rgb\n\n  if (typeof color === 'number') {\n    rgb = color\n  } else if (typeof color === 'string') {\n    let c = color[0] === '#' ? color.substring(1) : color\n    if (c.length === 3) {\n      c = c.split('').map(char => char + char).join('')\n    }\n    if (c.length !== 6) {\n      consoleWarn(`'${color}' is not a valid rgb color`)\n    }\n    rgb = parseInt(c, 16)\n  } else {\n    throw new TypeError(`Colors can only be numbers or strings, recieved ${color == null ? color : color.constructor.name} instead`)\n  }\n\n  if (rgb < 0) {\n    consoleWarn(`Colors cannot be negative: '${color}'`)\n    rgb = 0\n  } else if (rgb > 0xffffff || isNaN(rgb)) {\n    consoleWarn(`'${color}' is not a valid rgb color`)\n    rgb = 0xffffff\n  }\n\n  return rgb\n}\n\nexport function intToHex (color: RGB): string {\n  let hexColor: string = color.toString(16)\n\n  if (hexColor.length < 6) hexColor = '0'.repeat(6 - hexColor.length) + hexColor\n\n  return '#' + hexColor\n}\n\nexport function colorToHex (color: string | number | {}): string {\n  return intToHex(colorToInt(color))\n}\n"],"sourceRoot":""}]}